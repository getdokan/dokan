/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/src/js/helper.js":
/*!*********************************!*\
  !*** ./assets/src/js/helper.js ***!
  \*********************************/
/***/ (() => {

eval(";\n(function (document, window, $) {\n  /**\n   * Gets i18n date format\n   *\n   * @since DOKAN_PRO_SINCE\n   */\n  window.dokan_get_i18n_date_format = function (format = true) {\n    if (!format) {\n      return dokan_helper.i18n_date_format;\n    }\n    let formatMap = {\n      // Day\n      d: 'dd',\n      D: 'D',\n      j: 'd',\n      l: 'DD',\n      // Month\n      F: 'MM',\n      m: 'mm',\n      M: 'M',\n      n: 'm',\n      // Year\n      o: 'yy',\n      // not exactly same. see php date doc for details\n      Y: 'yy',\n      y: 'y'\n    };\n    let i = 0;\n    let char = '';\n    let datepickerFormat = '';\n    for (i = 0; i < dokan_helper.i18n_date_format.length; i++) {\n      char = dokan_helper.i18n_date_format[i];\n      if (char in formatMap) {\n        datepickerFormat += formatMap[char];\n      } else {\n        datepickerFormat += char;\n      }\n    }\n    return datepickerFormat;\n  };\n\n  /**\n   * Get i18n time format.\n   *\n   * @since DOKAN_PRO_SINCE\n   *\n   * @param {string|boolean} format Time format.\n   *\n   * @return {string} Return a specific time format\n   */\n  window.dokan_get_i18n_time_format = function (format = true) {\n    if (!format) {\n      return dokan_helper.i18n_time_format;\n    }\n    let replacements = {\n      N: 'E',\n      S: 'o',\n      w: 'e',\n      z: 'DDD',\n      W: 'W',\n      F: 'MMMM',\n      m: 'MM',\n      M: 'MMM',\n      n: 'M',\n      o: 'YYYY',\n      Y: 'YYYY',\n      y: 'YY',\n      a: 'a',\n      A: 'A',\n      g: 'h',\n      G: 'H',\n      h: 'hh',\n      H: 'HH',\n      i: 'mm',\n      s: 'ss',\n      u: 'SSS',\n      e: 'zz',\n      U: 'X'\n    };\n    let i = 0,\n      char = '',\n      timeFormat = '';\n    for (i = 0; i < dokan_helper.i18n_time_format.length; i++) {\n      if ('\\\\' === dokan_helper.i18n_time_format[i]) {\n        timeFormat += dokan_helper.i18n_time_format[i];\n        i++;\n        timeFormat += dokan_helper.i18n_time_format[i];\n        continue;\n      }\n      char = dokan_helper.i18n_time_format[i];\n      if (char in replacements) {\n        timeFormat += replacements[char];\n      } else {\n        timeFormat += char;\n      }\n    }\n    return timeFormat;\n  };\n\n  /**\n   * Get formatted time.\n   *\n   * @since DOKAN_PRO_SINCE\n   *\n   * @param {string} time   Time.\n   * @param {string} format Time format type.\n   *\n   * @return {string} Return formatted time.\n   */\n  window.dokan_get_formatted_time = function (time_string, output_format, input_format = dokan_get_i18n_time_format()) {\n    const length = output_format.length;\n    // return if no length is provided\n    if (length <= 0) {\n      return '';\n    }\n    const times = moment(time_string, input_format).toDate(),\n      // We used this date for getting time info.\n      add0 = function (t) {\n        return t < 10 ? '0' + t : t;\n      },\n      hours = String(times.getHours()),\n      minutes = String(times.getMinutes()),\n      seconds = String(times.getSeconds()),\n      sampm = hours >= 12 ? 'pm' : 'am',\n      campm = hours >= 12 ? 'PM' : 'AM',\n      checkFormat = (formats, format) => {\n        return formats[format] ? formats[format] : format;\n      };\n    convertTime = time => {\n      // Check correct time format and split into components\n      time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n      if (time.length > 1) {\n        time = time.slice(1);\n        time[0] = +time[0] % 12 || 12;\n      }\n      return time[0];\n    }, hour12 = convertTime(`${add0(hours)}:${add0(minutes)}`), replaceMent = {\n      'hh': add0(hour12),\n      'h': hour12,\n      'HH': add0(hours),\n      'H': hours,\n      'g': hour12,\n      'MM': add0(minutes),\n      'M': minutes,\n      'mm': add0(minutes),\n      'm': minutes,\n      'i': add0(minutes),\n      'ss': add0(seconds),\n      's': seconds,\n      'A': campm,\n      'a': sampm\n    };\n    let formatted_string = '',\n      temp_string = '',\n      current_string = '';\n    for (let i = 0; i < length; i++) {\n      // get current string\n      current_string = output_format[i];\n      if ('\\\\' === current_string) {\n        if (temp_string.length > 0) {\n          formatted_string += checkFormat(replaceMent, temp_string);\n          temp_string = '';\n        }\n        i++;\n        formatted_string += output_format[i];\n      } else if (temp_string.length === 0) {\n        temp_string = current_string;\n      } else if (temp_string !== current_string) {\n        formatted_string += checkFormat(replaceMent, temp_string);\n        temp_string = current_string;\n      } else if (temp_string === current_string) {\n        temp_string += current_string;\n      }\n    }\n    formatted_string += temp_string.length ? checkFormat(replaceMent, temp_string) : '';\n    return formatted_string;\n  };\n\n  /**\n   * Get date range picker supported date format\n   *\n   * @since 3.3.6\n   *\n   * @param {string} dateTime The date time to convert\n   *\n   * @return {string} Date range picker supported date format\n   */\n  window.dokan_get_daterange_picker_format = function (dateTime = dokan_helper.i18n_date_format) {\n    let formatMap = {\n      // Day\n      d: 'D',\n      D: 'DD',\n      j: 'D',\n      l: 'DD',\n      // Month\n      F: 'MMMM',\n      m: 'MM',\n      M: 'MM',\n      n: 'M',\n      // Year\n      o: 'YYYY',\n      // not exactly same. see php date doc for details\n      Y: 'YYYY',\n      y: 'YY',\n      // Hour\n      g: 'h',\n      G: 'H',\n      h: 'hh',\n      H: 'HH',\n      // Minute\n      i: 'mm',\n      // Second\n      s: 'ss'\n    };\n    let i = 0;\n    let char = '';\n    let dateRangePickerFormat = '';\n    for (i = 0; i < dateTime.length; i++) {\n      char = dateTime[i];\n      if (char in formatMap) {\n        dateRangePickerFormat += formatMap[char];\n      } else {\n        dateRangePickerFormat += char;\n      }\n    }\n    return dateRangePickerFormat;\n  };\n\n  /**\n   * Dokan Sweet Alert\n   *\n   * @since 3.2.13\n   *\n   * @param {string} message The event message for notification\n   * @param {object} [options] Configuration of sweet alert modal\n   *\n   * @return {Promise | bool} Return Promise on success, and false on failure\n   */\n  window.dokan_sweetalert = async function (message = '', options = {}) {\n    const defaults = {\n      text: message,\n      showCancelButton: true,\n      confirmButtonColor: '#28a745',\n      cancelButtonColor: '#dc3545',\n      ...dokan_helper.sweetalert_local\n    };\n    const args = {\n      ...defaults,\n      ...options\n    };\n    const action = args.action;\n\n    // Unset action property form args\n    delete args.action;\n    switch (action) {\n      case 'confirm':\n      case 'prompt':\n        return await Swal.fire(args);\n        break;\n      case 'alert':\n      default:\n        delete args.showCancelButton;\n        Swal.fire(args);\n        break;\n    }\n  };\n\n  /**\n   * Execute recaptcha token request\n   *\n   * @since 3.3.3\n   *\n   * @param {string} inputFieldSelector The input field for recaptcha token\n   * @param {string} action The action for recaptcha\n   *\n   * @return {Promise} Return Promise\n   */\n  window.dokan_execute_recaptcha = function (inputFieldSelector, action) {\n    return new Promise(function (resolve) {\n      // Check if dokan_google_recaptcha object exists\n      if ('undefined' === typeof dokan_google_recaptcha) {\n        resolve();\n      }\n      const recaptchaSiteKey = dokan_google_recaptcha.recaptcha_sitekey;\n      const recaptchaTokenField = document.querySelector(inputFieldSelector);\n\n      // Check if the recaptcha site key exists\n      if ('' === recaptchaSiteKey) {\n        resolve();\n      }\n\n      // Execute recaptcha after passing checks\n      grecaptcha.ready(function () {\n        grecaptcha.execute(recaptchaSiteKey, {\n          action: action\n        }).then(function (token) {\n          recaptchaTokenField.value = token;\n          resolve();\n        });\n      });\n    });\n  };\n\n  /**\n   * This method will extract ajax error message from ajax response\n   *\n   * @since 3.5.1\n   *\n   * @param jqXHR\n   *\n   * @returns {string}\n   */\n  window.dokan_handle_ajax_error = function (jqXHR) {\n    let error_message = '';\n    if (jqXHR.responseJSON && jqXHR.responseJSON.message) {\n      error_message = jqXHR.responseJSON.message;\n    } else if (jqXHR.responseJSON && jqXHR.responseJSON.data && jqXHR.responseJSON.data.message) {\n      error_message = jqXHR.responseJSON.data.message;\n    } else if (jqXHR.responseText) {\n      error_message = jqXHR.responseText;\n    }\n    return error_message;\n  };\n\n  /**\n   * Sanitize phone number characters.\n   *\n   * @since 3.7.22\n   *\n   * @param evt Event Object\n   *\n   * @return {void}\n   */\n  window.dokan_sanitize_phone_number = function (evt) {\n    // Allow: backspace, tab, enter and escape.\n    if ([\"Backspace\", \"Tab\", \"Enter\", \"Escape\"].indexOf(evt.key) !== -1) {\n      return;\n    }\n\n    // Allow: special characters.\n    if ([\"(\", \")\", \".\", \"-\", \"_\", \"+\"].indexOf(evt.key) !== -1) {\n      return;\n    }\n\n    // Allow: Ctrl+A.\n    if (\"a\" === evt.key && true === evt.ctrlKey) {\n      return;\n    }\n\n    // Allow: arrow keys.\n    if ([\"ArrowLeft\", \"ArrowRight\"].indexOf(evt.key) !== -1) {\n      return;\n    }\n\n    // Ensure that it is a number and stop the keypress.\n    if (evt.shiftKey && !isNaN(Number(evt.key))) {\n      return;\n    }\n    if (isNaN(Number(evt.key))) {\n      evt.preventDefault();\n    }\n  };\n  let copyIcon = `<svg width='20px' height='20px' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n  <path d='M8 4V16C8 17.1046 8.89543 18 10 18L18 18C19.1046 18 20 17.1046 20 16V7.24162C20 6.7034 19.7831 6.18789 19.3982 5.81161L16.0829 2.56999C15.7092 2.2046 15.2074 2 14.6847 2H10C8.89543 2 8 2.89543 8 4Z' stroke='#000000' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/>\n  <path d='M16 18V20C16 21.1046 15.1046 22 14 22H6C4.89543 22 4 21.1046 4 20V9C4 7.89543 4.89543 7 6 7H8' stroke='#000000' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/>\n  </svg>`;\n  let tickIcon = `<svg width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M4.89163 13.2687L9.16582 17.5427L18.7085 8\" stroke=\"#000000\" stroke-width=\"2.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  </svg>`;\n  let copyHolder = null;\n  let Functions = {\n    init() {\n      this.copyToClipBoardInit();\n      $('.dokan-copy-to-clipboard').on('click', this.copyToClipboardClickhandler);\n    },\n    copyToClipBoardInit() {\n      copyHolder = $('.dokan-copy-to-clipboard');\n      copyHolder.css('cursor', 'pointer');\n      copyHolder.html(copyIcon);\n    },\n    copyToClipboardClickhandler() {\n      let copyItem = $(this);\n      let copydata = $(this).data('copy') ? $(this).data('copy') : '';\n      const textarea = document.createElement('textarea');\n      textarea.classList.add(\"dokan-copy-to-clipboard-textarea\");\n      document.body.appendChild(textarea);\n      textarea.value = copydata;\n      textarea.select();\n      textarea.setSelectionRange(0, 99999);\n      let copiedSuccessfully = document.execCommand('copy');\n      document.body.removeChild(textarea);\n      if (copiedSuccessfully) {\n        copyItem.html(tickIcon);\n        setTimeout(() => {\n          copyItem.html(copyIcon);\n        }, 1000);\n      }\n    }\n  };\n  $(document).ready(function () {\n    Functions.init();\n  });\n})(document, window, jQuery);\n\n//# sourceURL=webpack://dokan/./assets/src/js/helper.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/src/js/helper.js"]();
/******/ 	
/******/ })()
;