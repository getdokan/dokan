name: End-to-End Tests

on:
  pull_request:
  push:
    branches:
      - develop
      - e2e-pw
  workflow_dispatch:
# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  tests:
    timeout-minutes: 30
    name: e2e tests
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false

    steps:
      - uses: actions/checkout@v3
        with:
          ref: "e2e-pw"
          # fetch-depth: 0

      - name: Use desired version of NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      # - name: Clone dokan-pro
      #   uses: actions/checkout@v3
      #   with:
      #     repository: weDevsOfficial/dokan-pro
      #     token: ${{ secrets.ACCESS_TOKEN }}
      #     path: "plugins/dokan-pro"
      #     ref: "develop"
      #     # fetch-depth: 0

      # - name: Composer install and build (Dokan-lite)
      #   run: |
      #     composer install --no-dev
      #     composer dump-autoload -o

      # - name: Npm install and build (Dokan-lite)
      #   run: |
      #     npm i
      #     npm run dev:build
      #     grunt

      # - name: Composer install and build (Dokan-pro)
      #   run: |
      #     cd plugins/dokan-pro
      #     composer update
      #     composer install --no-dev
      #     composer dump-autoload -o

      # - name: Npm install and build (Dokan-pro)
      #   run: |
      #     cd plugins/dokan-pro
      #     npm i
      #     npm run dev:build
      #     npm run build

      - name: Install dependencies & Setup WordPress Env
        run: |
          cd tests/e2e 
          npm ci --production


      # - name: Resetting wp-env
      #   if: failure()
      #   run: |
      #     cd tests/e2e
      #     npm run restart:env

      # - name: Activate theme:Storefront
      #   run: |
      #     cd tests/e2e 
      #     npm run activate:theme

      # - name: Set Permalink structure
      #   run: |
      #     cd tests/e2e 
      #     npm run wp-env run tests-cli "wp rewrite structure '/%postname%'"

      # - name: Setup for e2e tests
      #   run: |
      #     cd tests/e2e 
      #     npm run test:e2e-setup

      - name: Get installed Playwright version1
        id: playwright-version1
        run: |
          cd tests/e2e
         # echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV
          echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" 
      - name: Get installed Playwright version2
        id: playwright-version2
        run: |
          cd tests/e2e
        # PLAYWRIGHT_VERSION=$(npm ls --json @playwright/test | jq --raw-output '.dependencies["@playwright/test"].version')echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV   
        PLAYWRIGHT_VERSION=$(npm ls --json @playwright/test | jq --raw-output '.dependencies["@playwright/test"].version')echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" 
      - name: Get installed Playwright version3
        id: playwright-version3
        run: |
          cd tests/e2e
        # echo -n "::set-output name=version::$(npm ls @playwright/test --json | jq --raw-output '.dependencies["@playwright/test"].version')" 
        echo -n "::set-output name=version::$(npm ls @playwright/test --json | jq --raw-output '.dependencies["@playwright/test"].version')" 

      # - name: Get installed Playwright versionkk
      #   id: playwright-versionkk
      #   run: |
      #     cd tests/e2e 
      #     echo "::set-output name=version::$(npm ls @playwright/test | grep @playwright | sed 's/.*@//')" 
       # node -e "console.log(require('playwright/package.json').version)"
      #  echo "PLAYWRIGHT_VERSION=$(node -e "process.stdout.write(require('@playwright/test/package.json').version)")" >> $GITHUB_OUTPUT
      

      # - name: Store Playwright's Version
      #   run: |
      #     PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//')
      #     echo "Playwright's Version: $PLAYWRIGHT_VERSION"
      #     echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV

      # - name: Cache playwright binaries
      #   uses: actions/cache@v3
      #   id: playwright-cache
      #   with:
      #     path: |
      #       ~/.cache/ms-playwright
          # key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
          # key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      # # Install browser binaries & OS dependencies if cache missed
      # - name: Install Playwright browser binaries & OS dependencies
      #   if: steps.playwright-cache.outputs.cache-hit != 'true'
      #   run: |
      #         npx playwright install --with-deps chromium

      # # Install only the OS dependencies if cache hit
      # - name: Install Playwright OS dependencies
      #   if: steps.playwright-cache.outputs.cache-hit == 'true'
      #   run: |
      #         npx playwright install-deps
 
      # - name: Running the e2e tests
      #   uses: nick-fields/retry@v2
      #   with:
      #     timeout_seconds: 30000
      #     max_attempts: 1
      #     retry_on: error
      #     command: cd tests/e2e && npm run test:e2e

      #  cd tests/e2e && npm run test setup.spec.ts
      # - name: Running the e2e tests
      #   run: |
      #     cd tests/e2e 
      #     npm run test:e2e

      #   env:
      #     CI: true
      #     ADMIN: ${{ secrets.ADMIN }}
      #     ADMIN_PASSWORD: ${{ secrets.PASSWORD }}
      #     VENDOR: ${{ secrets.VENDOR }}
      #     VENDOR_PASSWORD: ${{ secrets.VENDOR_PASSWORD }}
      #     CUSTOMER: ${{ secrets.CUSTOMER }}
      #     CUSTOMER_PASSWORD: ${{ secrets.VENDOR_PASSWORD }}
      #     BASE_URL: ${{ secrets.BASE_URL }}
      #     GMAP : ${{secrets.GMAP}}

      # - name: Publish Test Report
      #   uses: mikepenz/action-junit-report@v3
      #   if: always() # always run even if the previous step fails
      #   with:
      #     report_paths: "tests/e2e/playwright-report/results.xml"
      #     include_passed: true,
      #     check_retries: true,
      #     detailed_summary: true,

      # - name: Generate Test Report
      #   uses: phoenix-actions/test-reporting@v8
      #   id: test-report # Set ID reference for step
      #   if: success() || failure() # run this step even if previous step failed
      #   with:
      #     name: e2e tests result # Name of the check run which will be created
      #     path: tests/e2e/playwright-report/results.xml # Path to test results
      #     reporter: jest-junit
      #     only-summary: "false" # Allows you to generate only the summary.
      #     list-suites: "all" # Limits which test suites are listed: 'all', 'failed'
      #     list-tests: "all" # Limits which test cases are listed: 'all','failed', 'none'
      #     fail-on-error: "true" # Set action as failed if test report contains any failed test

      # - name: Test results
      #   run: |
      #     echo "url is ${{ steps.test-report.outputs.runHtmlUrl }}"

      # - name: Archive test artifacts (screenshots, HTML snapshots, Reports)
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: test-artifact
      #     path: |
      #       tests/e2e/playwright
      #       tests/e2e/playwright-report
      #     if-no-files-found: ignore
      #     retention-days: 30

      # - name: Publish HTML report to GH Pages
      #   if: always() # We want this to always run, even if test fail prior to this step running
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: tests/e2e/playwright-report # This is where index.html will be output
      #     keep_files: true # Set this to true to make sure we don't wipe out the other content in GitHub Pages
      #     user_name: "github-actions[bot]" # This will be the username that gets stamped in the repo commit
      #     user_email: "github-actions[bot]@users.noreply.github.com" # This will be the user email that gets stamped in the repo commit

      # - name: Test results
      #   if: always()
      #   run: |
      #     echo "url is https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#*/}"

  # publishTestResults:
  #   name: Publish Test Result
  #   needs: tests
  #   runs-on: ubuntu-latest
  #   if: always()
  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       id: download

  #     - name: Publish HTML report to GH Pages
  #       if: always() # We want this to always run, even if test fail prior to this step running
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ${{steps.download.outputs.download-path}} # This is where index.html will be output
  #         # keep_files: true # Set this to true to make sure we don't wipe out the other content in GitHub Pages
  #         user_name: "github-actions[bot]" # This will be the username that gets stamped in the repo commit
  #         user_email: "github-actions[bot]@users.noreply.github.com" # This will be the user email that gets stamped in the repo commit

  #       # redundant / in echo url remove before run
  #     - name: Test results
  #       run: |
  #         echo "url is https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#/*/}"
