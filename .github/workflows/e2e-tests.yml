name: End-to-End Tests

on:
  schedule:
    - cron: '0 8 * * *'
  pull_request:
  push:
    branches:
      - develop
      - e2e-pw
  workflow_dispatch:

  # Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  tests:
    name: e2e tests
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false

    steps:
      - name: Checkout testing repo
        uses: actions/checkout@v3
        with:
         ref: "e2e-pw"

      - name: Use desired version of NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: "npm"

      - name: Clone dokan-pro
        uses: actions/checkout@v3
        with:
          repository: weDevsOfficial/dokan-pro
          token: ${{ secrets.ACCESS_TOKEN }}
          path: "plugins/dokan-pro"
          ref: "develop"

      - name: Composer install and build (Dokan-lite)
        run: |

          composer install --no-dev
          composer dump-autoload -o

      - name: Npm install and build (Dokan-lite)
        run: |
          npm ci
          npm run dev:build
          grunt

      - name: Composer install and build (Dokan-pro)
        run: |
          cd plugins/dokan-pro
          composer update
          composer install --no-dev
          composer dump-autoload -o

      - name: Npm install and build (Dokan-pro)
        run: |
          cd plugins/dokan-pro
          npm ci
          npm run dev:build
          npm run build

      - name: Install dependencies 
        run: |
          cd tests/pw 
          npm ci --production

      - name: Start WordPress Env
        run: |
          cd tests/pw
          npm run start:env 

      - name: Get Test DB PORT
        run: |
          cd tests/pw
          echo "DB_PORT=$(docker ps -f ancestor='mariadb' -f name='tests-mysql' --format='{{.Ports}}' | sed -E 's/.*:(.*)->.*/\1/')" >> $GITHUB_ENV

      - name: DB PORT
        run: |
          cd tests/pw 
          echo "The value of TEST_DB_PORT is ${{ env.DB_PORT }}"

      # - name: Activate theme:Storefront
      #   run: |
      #     cd tests/pw 
      #     npm run activate:theme

      # - name: Set Permalink structure
      #   run: |
      #     cd tests/pw 
      #     npm run wp-env run tests-cli 'wp rewrite structure /%postname%/'
      #     # curl http://localhost:9999/wp-json/wp/v2 

      # - name: Setup for e2e tests
      #   run: |
      #     cd tests/pw 
      #     npm run test:e2e-setup

      # key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
    
      # Get Playwright version
      - name: Get installed Playwright version
        id: playwright-version
        run: |
          cd tests/pw
          echo "PLAYWRIGHT_VERSION=$(npm ls @playwright/test --json | jq --raw-output '.dependencies["@playwright/test"].version')" >> $GITHUB_ENV

      # Cache browser binaries, cache key is based on Playwright version and OS
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
          # restore-keys: |
          #      ${{ runner.os }}-playwright-

      # Install browser binaries & OS dependencies if cache missed
      - name: Install Playwright browser binaries & OS dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          cd tests/pw
          npm run pw:browser-with-deps

      # # Install only the OS dependencies if cache hit  not needed
      # - name: Install Playwright OS dependencies
      #   if: steps.playwright-cache.outputs.cache-hit == 'true'
      #   run: |
      #     cd tests/pw
      #     npm run pw:deps-only
 
      # - name: Running the e2e tests
      #   uses: nick-fields/retry@v2
      #   with:
      #     timeout_seconds: 30000
      #     max_attempts: 1
      #     retry_on: error
      #     command: cd tests/pw && npm run test:e2e

      # - name: ðŸ§ª Running the e2e tests
      #   timeout-minutes: 30
      #   run: |
      #     cd tests/pw 
      #     npm run test:e2e

      #  cd tests/pw && npm run test setup.spec.ts
      - name: ðŸ§ª Running the api tests
        timeout-minutes: 30
        run: |
          cd tests/pw 
          npm run test:api
          
        env:
          ADMIN: admin
          ADMIN_PASSWORD: password  
          VENDOR: vendor1
          CUSTOMER: customer1
          USER_PASSWORD: 01dokan01
          GMAP : ${{secrets.GMAP}}

          BASE_URL: 'http://localhost:9999'
          CI: true
          SETUP: true
          SLOWMO: 0
          FORCE_COLOR: 1

          DB_HOST_NAME: localhost
          DB_USER_NAME: root
          DB_USER_PASSWORD: password
          DATABASE: tests-wordpress
          DB_PREFIX: wp_

      # - name: Publish Test Report
      #   uses: mikepenz/action-junit-report@v3
      #   if: always() # always run even if the previous step fails
      #   with:
      #     report_paths: "tests/pw/playwright-report/e2e/junit-report/e2e-results.xml"
      #     # include_passed: true,
      #     check_retries: true,
      #     # detailed_summary: true,
      #     check_name: 'E2E Test Report'
      #     summary: 'E2E Test Summary'
      #     # annotate_only: true,
      #     # annotate_notice: true,
      #     # job_name: 'e2e2e2e2e2e2e2e_jobName'

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: "tests/pw/playwright-report/api/junit-report/api-results.xml"
          # include_passed: true,
          check_retries: true,
          # detailed_summary: true,
          check_name: 'API Test Report'
          summary: 'API Test Summary'
          # annotate_only: true,
          # annotate_notice: true,
          # job_name: 'e2e2e2e2e2e2e2e_jobName'


      # - name: Generate Test Report
      #   uses: phoenix-actions/test-reporting@v8
      #   id: test-report # Set ID reference for step
      #   if: success() || failure() # run this step even if previous step failed
      #   with:
      #     name: e2e tests result # Name of the check run which will be created
      #     path: tests/pw/playwright-report/results.xml # Path to test results
      #     reporter: jest-junit
      #     only-summary: "false" # Allows you to generate only the summary.
      #     list-suites: "all" # Limits which test suites are listed: 'all', 'failed'
      #     list-tests: "all" # Limits which test cases are listed: 'all','failed', 'none'
      #     fail-on-error: "true" # Set action as failed if test report contains any failed test

      # - name: Test results
      #   run: |
      #     echo "url is ${{ steps.test-report.outputs.runHtmlUrl }}"

      - name: Archive test artifacts (screenshots, HTML snapshots, Reports)
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-artifact
          path: |
            tests/pw/playwright
            tests/pw/playwright-report
          if-no-files-found: ignore
          retention-days: 30

      # - name: Publish HTML report to GH Pages
      #   if: always() # We want this to always run, even if test fail prior to this step running
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: tests/pw/playwright-report # This is where index.html will be output
      #     keep_files: true # Set this to true to make sure we don't wipe out the other content in GitHub Pages
      #     user_name: "github-actions[bot]" # This will be the username that gets stamped in the repo commit
      #     user_email: "github-actions[bot]@users.noreply.github.com" # This will be the user email that gets stamped in the repo commit

      # - name: Test results
      #   if: always()
      #   run: |
      #     echo "url is https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#*/}"

  # publishTestResults:
  #   name: Publish Test Result
  #   needs: tests
  #   runs-on: ubuntu-latest
  #   if: always()
  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       id: download

  #     - name: Publish HTML report to GH Pages
  #       if: always() # We want this to always run, even if test fail prior to this step running
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ${{steps.download.outputs.download-path}} # This is where index.html will be output
  #         # keep_files: true # Set this to true to make sure we don't wipe out the other content in GitHub Pages
  #         user_name: "github-actions[bot]" # This will be the username that gets stamped in the repo commit
  #         user_email: "github-actions[bot]@users.noreply.github.com" # This will be the user email that gets stamped in the repo commit

  #       # redundant / in echo url remove before run
  #     - name: Test results
  #       run: |
  #         echo "url is https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#/*/}"